@use 'settings';

$fz: 16;

@function rem($px) {
  @return calc(#{$px} / #{$fz} * 1rem);
}

@function em($px, $currentSize: $fz) {
  @return calc(#{$px} / #{$currentSize} * 1rem);
}

@function percent($value1, $value2) {
  @return calc($value1 / $value2) * 100%;
}

// Адаптивна властивість
@mixin adaptiveValue(
  $property,
  $startValue,
  $endValue,
  $startMediaWidth: $containerWidth,
  $endMediaWidth: $minMaxWidthType,
  $type: $adaptiveType,
  $keepSize: 0,
  $important: false
) {
  $addValue: $startValue - $endValue;
  $importantSuffix: if($important == true, ' !important', '');

  @if $type==1 {
    #{$property}: rem($startValue);
    @media (max-width: rem($startMediaWidth)) {
      #{$property}: calc(
          #{$endValue + px} + #{$addValue} * ((100vw - #{$endMediaWidth + px}) / #{$startMediaWidth - $endMediaWidth})
        )
        #{$importantSuffix};
    }
    @if $keepSize==0 {
      @media (max-width: rem($endMediaWidth)) {
        #{$property}: rem($endValue) #{$importantSuffix};
      }
    }
  } @else if $type==2 {
    #{$property}: rem($startValue);
    $addValue: $endValue - $startValue;
    @media (min-width: rem($startMediaWidth)) {
      #{$property}: calc(
          #{$startValue + px} + #{$addValue} *
            ((100vw - #{$startMediaWidth + px}) / #{$endMediaWidth - $startMediaWidth})
        )
        #{$importantSuffix};
    }
    @if $keepSize==0 {
      @media (min-width: rem($endMediaWidth)) {
        #{$property}: rem($endValue) #{$importantSuffix};
      }
    }
  } @else if $type==3 {
    #{$property}: calc(#{$endValue + px} + #{$addValue} * ((100vw - #{$minWidth + px}) / #{$maxWidth - $minWidth}))
      #{$importantSuffix};
    @media (max-width: rem($minWidth)) {
      #{$property}: rem($endValue) #{$importantSuffix};
    }
  }
}
